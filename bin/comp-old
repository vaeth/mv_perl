#!/usr/bin/env perl
BEGIN { require 5.006_001 }
package Comp;
our $VERSION = 'v3.0.2';
eval { $VERSION = version->declare($VERSION) };
eval 'use version 0.77; $VERSION = version->declare($VERSION)' if($@);

use warnings;
use strict;
use integer;
use Getopt::Long 2.24 ();
#use Pod::Usage ();

=encoding UTF-8

=head1 NAME

comp-old - compare directories/files recursively

=head1 SYNOPSIS

=over 8

=item B<comp-old> [options] Dir/Mask Dir/Mask ... LastDir/Mask

=item B<comp-old> [options] Dir/Mask

=back

Compares the Dirs/files given by the first argument with LastDir/Mask.
In the second form, LastDir/Mask defaults to ""
The files are always compared binary.
Also metadata like timestamps(attributes is compared.
When calling from a shell, do not forget '...' around Mask.

Options B<--man> (or B<-?>) respectively B<--help> (or B<-h>)
give an explicit help as a manpage resp. an ascii-text.

=head1 OPTIONS AND ARGUMENTS

=over 8

=item B<--down> or B<-d>

Do B<not> compare metadata of highest directories.

=item B<--norecurse> or B<-r>

Do B<not> compare recursively (except for one step in directory arguments)

=item B<--nocomp> or B<-c>

Compare only metadata but not the contents of the files.
This is much faster, but will not find differences in content, of course.

=item B<--ignore-case> B<-i>

Ignore case differences in paths (useful for FAT)

=item B<--verbose> or B<-v>

print verbose filenames

=item B<--debug> or B<-D>

Debug

=item B<--noresolve> or B<-l>

Compare attributes of symbolic links instead of files (no resolving)

=item B<--pedantic> or B<-p>

Compare also access/status-change time, hardlink number, and device attributes

=item B<--too-pedantic> or B<-P>

As B<-p>, but compare also device identifiers and warn about zero size

=item B<--only-first> or B<-1>

Do not complain if LastDir contains an unmatched file

=item B<--only-last> or B<-2>

Do not complain if LastDir does not contain a required file

=item B<--tex> or B<-x>

TeX Mode: Ignore *.dvi *.aux *.toc ...

=item B<--neverwarn> or B<-w>

Do not print warnings (differing/strange attributes/owners/groups/timestamps).
This is slightly stronger than B<-Wota>

=item B<--nowarn> or B<-W>

Do not print warnings about strange attributes

=item B<--noowner> or B<-o>

Do not print warnings about differing ownership.

=item B<--notime> or B<-t>

Do not print warnings about differing timestamps. (This implies B<-T>)

=item B<--nodirtime> or B<-D>

Do not compare timestamps for B<directories> (useful for FAT)

=item B<--noattr> or B<-a>

Do not print warnings about differing attributes.

=item B<--version> or B<-V>

Print version number

=back

=head1 AUTHOR

Martin VE<auml>th E<lt>martin@mvath.deE<gt>

=cut

# Global Variables

my $blocksize = 512 * 1024;
my $sepstring = '';
my $sepstringdefault = ': ';
my $home = $ENV{'HOME'};

# Default for the Options:

my $nohighdir = '';
my $norecurse = '';
my $nocompare = '';
my $ignorecase = '';
my $sloppy = '';
my $nowarn = '';
my $noowner = '';
my $notime = '';
my $nodirtime = '';
my $noattrib = '';
my $noresolve = '';
my $pedantic = '';
my $toopedantic = '';
my $notforlast = '';
my $notforfirst = '';
my $texmode = '';
my $debug = '';
my $verbose = '';

# Parse Options:

Getopt::Long::Configure(qw(gnu_getopt));
Getopt::Long::GetOptions(
	'help|h', sub { &pod2usage(0) },
	'man|?', sub { &pod2usage(-verbose => 2, -exit => 0) },
	'version|V', \&version,
	'down|d', \$nohighdir,
	'norecurse|r', \$norecurse,
	'nocomp|c', \$nocompare,
	'ignore-case|i', \$ignorecase,
	'neverwarn|w', \$sloppy,
	'nowarn|W', \$nowarn,
	'noowner|o', \$noowner,
	'notime|t', \$notime,
	'nodirtime|T', \$nodirtime,
	'noattr|a', \$noattrib,
	'noresolve|l', \$noresolve,
	'pedantic|p', \$pedantic,
	'too-pedantic|P', \$toopedantic,
	'only-first|1', \$notforlast,
	'only-last|2', \$notforfirst,
	'tex|x', \$texmode,
	'debug|D', \$debug,
	'verbose|v', \$verbose,
) or &pod2usage(2);
&pod2usage(2) unless(@ARGV);

$nodirtime = 1 if($notime);
$pedantic = 1 if($toopedantic);
$sepstring = $sepstringdefault if($verbose);
$nowarn = $noowner = $notime = $nodirtime = $noattrib = 1 if($sloppy);

my ($dorecurse, $prepend, $printprepend);
my ($currpath, $isdir, $fullpath, $comparepath);
my ($printpath, $nextpath, $domatch);
my ($depth, $makelast);
my $mask = '';
my $differ = 0;
my (@A, @Adepth, @Afull, @Aprint, %Ahash);
my (@B, @Bdepth, @Bfull, @Bprint, %Bhash);
my ($i, $j);
my ($describe, $serious);

# Translate pathnames into regular expressions.
# FIXME: Currently, it is impossible to quote the magic characters * ? [ ] -
# E.g. the sequence "\*" is considered as the "mask" for files starting with \
sub ProcessMask {
	($mask) = @_;

	# Replace multiple occurences of / by single ones, and chop / at the end:
	while($mask =~ s{\/\/+}{\/}go) {}
	$mask =~ s{^\~/}{$home/} if(defined($home) && ($home ne ''));
	$mask =~ s{/$}{} if($mask ne '/');
	$dorecurse = 1;
	if($mask =~ m{[\*\?\[]}) {  # If the mask contains wildcard:
		if($mask =~ m{\A(.*\/)([^\/]*[\*\?\[].*)\z}m) {
			# If $mask consists of leading directory(ies) $1 and remaining mask with
			# wildcards, then we recurse, starting from $1.
			$prepend = $1;
			$mask = $2;
			$printprepend = $prepend . $sepstring;
		} else {
			$prepend = './';
			$printprepend = '';
		}
		# Quote mask except alphanumerics and the symbols * ? [ ] -
		$mask =~ s{([^\w\*\?\[\]\-])}{\\$1}gm;
		# Now replace * and ? by [^\/]* and [^\/] respectively.
		$mask =~ s{\*}{[^\/]*}go;
		$mask =~ s{\?}{[^\/]}g
	} else {  # Otherwise (i.e. mask is actually a dir/filename):
		if($mask eq '') {
			$prepend = './';
			$printprepend = ''
		} else {
			if(-d $mask) {  # If we consider directories:
				$prepend = $mask;
				if($prepend ne '/') {
					$prepend = $prepend . '/'
				}
				$printprepend = $prepend . $sepstring;
				$mask = ''
			} else {  # For a single file, we isolate the path before, if it exists
				$dorecurse = '';
				if($mask =~ m{\A(.*\/)([^\/]*)\z}m) {
					$prepend = $1;
					$printprepend = $prepend . $sepstring;
					$mask = $2
				} else {
					$prepend = './';
					$printprepend = ''
				}
			}
		}
		# Quote mask:
		$mask =~ s{(\W)}{\\$1}g
	}
	$depth = 0;
	&ProcessDir('')
}

# At the first call of ProcessDir, $prepend is a directory path
# (which should exist unless the user has typed complete rubbish),
# and this path ends with '/'.
# $mask is a regular expression which should match the path following
# $prepend.
sub ProcessDir {
	my($act, @dir, $fname) = @_;
	$currpath = $act;
	&AddIfMatch('');
	$act = $nextpath;
	return unless($isdir);
	opendir(my $dirfh, $fullpath);
	@dir = readdir($dirfh);
	closedir($dirfh);
	for my $fname (@dir) {
		if(($fname ne '.') && ($fname ne '..')) {
			$currpath = $act . $fname;
			&AddIfMatch(1);
			if($isdir && $dorecurse) {
				++$depth;
				&ProcessDir($currpath);
				--$depth
			}
		}
	}
}

sub AddIfMatch {
	my($sureadd) = @_;
	if($currpath eq '') {
		$isdir = 1;
		$fullpath = $prepend . '.';
		$comparepath = './';
		$printpath = $prepend;
		$nextpath = ''
	} else {
		$fullpath = $prepend . $currpath;
		if(-d $fullpath) {
			$isdir = 1;
			$comparepath = $currpath . '/'
		} else {
			$isdir = '';
			$comparepath = $currpath
		}
		$printpath = $printprepend . $comparepath;
		$nextpath = $comparepath
	}
	# We match if we either have a perfect match (from start 'til end)
	# or if /... follows.
	# If option $norecurse is used, we require in the
	# latter case that ... contains no further /
	# Moreover, we have to make an exception for the empty $mask.
	$domatch = '';
	if($mask eq '') {
		$domatch = 1 unless(($norecurse) && ($currpath =~ m{\/.*\/}m))
	} else {
		if($ignorecase) {
			if($currpath =~ m{\A$mask\z}im) {
				$domatch = 1
			} elsif($currpath =~ m{\A$mask\/\z}im) {
				$domatch = 1 unless(($norecurse) && ($currpath =~ m{\/}))
			}
		} else {
			if($currpath =~ m{\A$mask\z}m) {
				$domatch = 1
			} elsif($currpath =~ m{\A$mask\/}m) {
				$domatch = 1 unless(($norecurse) && ($currpath =~ m{\/}))
			}
		}
	}
	# However, we do not match directories in which we have just recursed
	# (unless this is the first directory).
	# We also do not match *.dvi ... files in TeX mode
	if($isdir) {
		unless($sureadd) {
			$domatch = '' if(($depth != 0) || ($nohighdir))
		}
	} elsif($texmode) {
		if($ignorecase) {
			$domatch = ''
				if($currpath =~ m{\.(dvi|aux|toc|lo[ft]|idx|ind|glo|log|[bdi]lg)$}i)
		} else {
			$domatch = ''
				if($currpath =~ m{\.(dvi|aux|toc|lo[ft]|idx|ind|glo|log|[bdi]lg)$})
		}
	}
	if($domatch) {
		if($makelast) {
			print('For second arg: ', $comparepath, ' =~ ', $fullpath, "\n") if($debug);
			push(@B, $comparepath);
			push(@Bdepth, $depth);
			push(@Bfull, $fullpath);
			push(@Bprint, $printpath);
			$Bhash{$comparepath} = $#B
		} else {
			print('For  first arg: ', $comparepath, ' =~ ', $fullpath, "\n") if($debug);
			push(@A, $comparepath);
			push(@Adepth, $depth);
			push(@Afull, $fullpath);
			push(@Aprint, $printpath);
			$Ahash{$comparepath} = $#A
		}
	}
}


if($[ < $#ARGV) {
	for($i = $[; $i < $#ARGV; ++$i) {
		&ProcessMask($ARGV[$i])
	}
	$makelast = 1;
	&ProcessMask($ARGV[$i])
} else {
	&ProcessMask($ARGV[$[]);
	$makelast = 1;
	&ProcessMask('')
}

# If both lists contain only precisely one file
# (typically this is the case if "comp fileA fileB" is called),
# then we do not complain if fileA and fileB have nonmatching names.
# Instead, we just compare fileA and fileB which is what the user expects.
# This is of course an exceptional trivial case:

$i = $j = $[;
if(($#A == $i) && ($#B == $j)) {
	my $name = $A[$i];
	$isdir = ($name =~ m{\/$});
	# We have this special treatment only if $A and $B are both directories
	# or both files:
	if($isdir == ($B[$j] =~ m{\/$})) {
		&comparepair();
		exit($differ);
	}
}

for($i = $[; $i <= $#A; ++$i) {
	my $name = $A[$i];
	$isdir = ($name =~ m{\/$});
	$j = $Bhash{$name};
	if(defined($j)) {
		&comparepair()
	} else {
		if($isdir) {  # If we deal with a directory and have no match:
			unless($notforfirst) {
				++$differ;
				print('DIR  without matching  last arg: ', $Aprint[$i], "\n")
			}
			# We skip until we are at the current depth again.
			$depth = $Adepth[$i];
			while(++$i <= $#A) {
				if($Adepth[$i] == $depth) {
					--$i;
					last
				}
			}
		} else {
			unless($notforfirst) {
				++$differ;
				print('File without matching  last arg: ', $Aprint[$i], "\n")
			}
		}
	}
}

for($j = $[; $j <= $#B; ++$j) {
	my $name = $B[$j];
	$isdir = ($name =~ m{\/$});
	$i = $Ahash{$name};
	next if(defined($i));
	if($isdir) {  # If we deal with a directory and have no match:
		unless($notforlast) {
			++$differ;
			print('DIR  without matching first arg: ',  $Bprint[$j], "\n")
		}
		# We skip until we are at the current depth again.
		$depth = $Bdepth[$j];
		while(++$j <= $#B) {
			if($Bdepth[$j] == $depth) {
				$j--;
				last
			}
		}
	} else {
		unless($notforlast) {
			++$differ;
			print('File without matching first arg: ', $Bprint[$j], "\n")
		}
	}
}

exit($differ ? 1 : 0);


# $i and $j must contain the indices of the files to compare.
# Moreover, $isdir must be set depending whether we have files or dirs.
sub comparepair {
	$describe = '';
	$serious = '';
	my ($a, $b) = ($Afull[$i], $Bfull[$j]);
	my $Alink = (-l $a);
	my $Blink = (-l $b);
	if(($Alink) || ($Blink)) {
		unless($Alink && $Blink) {
			$serious = 1;
			&adderror('link-status');
			unless($nowarn) {
				if($Alink) {
					&warn($Aprint[$i], ' is a symbolic link')
				} else {
					&warn($Bprint[$j], ' is a symbolic link')
				}
			}
		}
	}
	my @Stat = (($Alink && $noresolve) ? lstat($a) : stat($a));
	my $Astat = ($#Stat >= 8);
	my ($Adev, $Aino, $Amode, $Ahlink, $Auid, $Agid, $Ardev, $Asize, $Aatime, $Amtime, $Actime, $blksize, $blocks) = @Stat;
	@Stat = (($Blink && $noresolve) ? lstat($b) : stat($b));
	my $Bstat = ($#Stat >= 8);
	my ($Bdev, $Bino, $Bmode, $Bhlink, $Buid, $Bgid, $Brdev, $Bsize, $Batime, $Bmtime, $Bctime) = @Stat;
	unless($Astat && $Bstat) {
		unless($Astat) {
			&error('cannot get stat of ', $a)
		}
		unless($Bstat) {
			&error('cannot get stat of ', $b)
		}
		if($Astat) {
			print('File without statable  last arg: ', $Aprint[$i], "\n")
		}
		if($Bstat) {
			print('File without statable first arg: ', $Bprint[$j], "\n")
		}
		return
	}
	my $diffother = '';
	if($toopedantic) {
		if(($Ardev) || ($Brdev)) {
			if(($Ardev) && ($Brdev)) {
				&warn($Aprint[$i], ' and ', $Bprint[$j], ' have unusual attributes')
					unless($nowarn)
			} else {
				$diffother = 1;
				unless($nowarn) {
					if($Ardev) {
						&warn($Aprint[$i], ' has unusual attributes')
					} else {
						&warn($Bprint[$j], ' has unusual attributes')
					}
				}
			}
		}
	}
	unless($noattrib) {
		&adderror('attributes') if(($Amode != $Bmode) || $diffother)
	}
	if($pedantic) {
		&adderror('hardlink-nr') if($Ahlink != $Bhlink)
	}
	unless($noowner) {
		&adderror('uid/gid') if(($Auid != $Buid) || ($Agid != $Bgid ))
	}
	unless($isdir ? $nodirtime : $notime) {
		&adderror('modify time') if($Amtime != $Bmtime);
		if($pedantic) {
			&adderror('status time') if($Actime != $Bctime);
			&adderror('access time') if($Aatime != $Batime)
		}
	}
	unless($isdir) {
		if($toopedantic && !(($Asize > 0) && ($Bsize > 0))) {
			if(($Asize <= 0) && ($Bsize <= 0)) {
				&warn($Aprint[$i], ' and ', $Bprint[$j], ' have size 0')
			} else {
				&warn((($Asize <= 0) ? $Aprint[$i] : $Bprint[$j] ), ' has size 0')
			}
		}
		if($Asize != $Bsize) {
			$serious = 1;
			&adderror('length')
		}
		if($noresolve && ($Alink || $Blink)) {
			if($Alink && $Blink) {
				my $al = readlink($a);
				&error('cannot read link ' . $a) unless(defined($al));
				my $bl = readlink($b);
				&error('cannot read link ' . $b) unless(defined($bl));
				if(defined($al) && defined($bl) && ($al ne $bl)) {
					$serious = 1;
					&adderror('symlink destinations')
				}
			}
		} else {
			unless((((!defined($Adev) && !defined($Bdev)) || ($Adev eq $Bdev)) &&
				(defined($Aino) && defined($Bino)) && ($Aino eq $Bino)) ||
				&comparefile($a, $b, $Asize, $Bsize)) {
				$serious = 1;
				&adderror('content')
			}
		}
	}
	if($describe ne '') {
		if($serious) {
			++$differ;
			print($Aprint[$i], ' and ', $Bprint[$j], " have different $describe\n")
		} else {
			&warn($Aprint[$i], ' and ', $Bprint[$j], " have different $describe")
				unless($sloppy)
		}
	}
}

sub adderror {
	if($describe ne '') {
		$describe .= ', ' . $_[0]
	} else {
		$describe = $_[0]
	}
}

sub comparefile {
	my ($a, $b, $toread) = @_;
	return 1 if(($toread <= 0) || $nocompare);
	return 1 unless((-f $a) && (-f $b));
	my $result = 1;
	my ($afile, $bfile);
	if(open($afile, '<', $a)) {
		binmode($afile)
	} else {
		&error('cannot open ', $a);
		$result = ''
	}
	if(open($bfile, '<', $b)) {
		binmode($bfile)
	} else {
		&error('cannot open ', $b);
		$result = ''
	}
	while($result && ($toread > 0)) {
		my $readnow = (($toread < $blocksize) ? $toread : $blocksize);
		my ($ablock, $bblock);
		if((read($afile, $ablock, $readnow)) != $readnow) {
			&error('read error for file ', $Afull[$i]);
			$result = ''
		}
		if((read($bfile, $bblock, $readnow)) != $readnow) {
			&error('read error for file ', $Bfull[$j]);
			$result = ''
		}
		if($result && ($ablock ne $bblock)) {
			$result = ''
		}
		$toread -= $readnow if($result)
	}
	close($bfile);
	close($afile);
	$result
}

sub error {
	print(STDERR 'comp-old: ', @_, "\n")
}

sub warn {
	print('warning: ', @_, "\n")
}

sub version {
	print('comp-old ', $VERSION, "\n");
	exit(0)
}

sub pod2usage {
	require Pod::Usage;
	&Pod::Usage::pod2usage
}
