#!/usr/bin/env perl
require 5.022;
package PatchdirsLs v1.6.1;

use warnings;
use strict;
use integer;
use File::Find ();
use Getopt::Long 2.24 ();
#use Pod::Usage ();
#use String::ShellQuote ();  # not mandatory but recommended: poor fallback

=head1 NAME

patchdirs-ls - Move/delete/copy files to get a directory structure

=head1 SYNOPSIS

B<patchdirs-ls> [options] I<DESTLIST>

To get an extended help, type B<patchdirs-ls --man> or B<patchdirs-ls -?>

=head1 DESCRIPTION

Move/delete/copy files such that after the operatations the directories
listed in the file(s) I<DESTLIST> contain B<precisely> the files listed
in I<DESTLIST>.

The format of I<DESTLIST> is simple: The name of the first directory, followed
by the files it should contain, the name of the second directory, followed by
its files etc; to distinguish directories from files, the directory names
B<must> end with <:> or B</> and the filenames must B<not>.
Lines starting with B<#> are ignored.

=head1 OPTIONS

=over 8

=item B<--help> or B<-h>

Display brief help.

=item B<--man> or B<-?>

Display extended help as a manpage.

=item B<--strip=>I<num> or B<-p> I<num>

Cut the first I<NUM> B</> from the directory names

=item B<--show> or B<-s>

Only show what would be done, do not alter anything

=item B<--verbose=>I<x> or B<-v> I<x>

be verbose (level I<x>; negative value suppresses warnings; 0 is default)

=item B<--nodelete> or B<-D>

Do not delete any files

=item B<--delete> or B<-d>

Override previous B<--nodelete>

=item B<--twins=>I<num> or B<-t> I<num>

Continue even if there are doubts about double sourcenames

Depending on I<num>, the following leads to an error:

=over 16

=item B<0> Names are double (even if on the right place)

=item B<1> Names are double, but all exist in right directory

=item B<2> Names are double, but precisely one needs to be moved

=item B<3> Names are double and it is unclear which to move/copy

=item B<4> - (double names are always OK)

=back

=item B<--ignorevoid> or B<-e>

Continue even if a required file does not exist

=item B<--ignore> or B<-i>

Same as --twins=4 --ignorevoid

=item B<--version> or B<-V>

Print version number

=item B<-->

Last option

=back

=head1 AUTHOR

Martin VE<auml>th E<lt>martin@mvath.deE<gt>

=cut

# Global Variables:

our $VERSION;

# Default for the Options:

my $dodelete = 1;
my $strip = 0;
my $verbose = 0;
my $twins = 0;
my $ignorevoid = '';
my $show = '';

# Parse Options:

Getopt::Long::Configure(qw(gnu_getopt));
Getopt::Long::GetOptions(
	'help|h', sub { &pod2usage(0) },
	'man|?', sub { &pod2usage(-verbose => 2, -exit => 0) },
	'show|s', \$show,
	'delete|d', \$dodelete,
	'nodelete|D', sub { $dodelete = '' },
	'strip|p=i', sub { (undef,$strip) = @_ },
	'twins|t=i', \$twins,
	'ignorevoid|e', \$ignorevoid,
	'ignore|i', sub { $twins = 4; $ignorevoid = 1 },
	'verbose|v:i', \$verbose,
	'version|V', \&version
) or &pod2usage(2);

# Functions

sub error {
	print(STDERR 'patchdirs-ls', @_, "\n")
}

sub fatal {
	&error;
	exit(1)
}

sub warn {
	print(STDERR 'warning: ', @_, "\n")
}


sub version {
	print('patchdirs-ls ', $VERSION, "\n");
	exit(0)
}

sub pod2usage {
	require Pod::Usage;;
	&Pod::Usage::pod2usage
}

sub shdash {
	my $c = shift();
	$c = [$c] unless(ref($c) eq 'ARRAY');
	for my $i (@_) {
		if($i =~ m{^[-+]}o) {
			push(@$c, '--');
			last
		}
	}
	(@$c, @_)
}

# use String::ShellQuote () and return whether successful

{ my $shellquote = undef;  # A closure static variable
sub use_shellquote {
	return $shellquote if(defined($shellquote));
	eval {
		require String::ShellQuote
	};
	$shellquote = !$@
}}

# like join(' ', @_), but shell-quote arguments

sub join_quoted {
	my @r;
	for my $i (@_) {
		my $a = $i;
		$a =~ s{\'}{\'\\\'\'}g;
		$a = "'$a'";
		$a =~ s{(\A|[^\\])\'([\w\-\,\.\:\/]*)\'}{$1$2}gm;
		push(@r, ($a ne '') ? $a : "''")
	}
	join(' ', @r)
}

sub shell_quote_best_effort {
	(&use_shellquote() ?
		&String::ShellQuote::shell_quote_best_effort : &join_quoted)
}

# Read DESTLIST and create the corresponding array @destcont of arrays.

my @dirnames = ();
my %desthash = ();
my @destconts = ();
while(<<>>) {
	chomp();
	if(s{[\:\/]\s*$}{}o) {  # We are parsing a directory name
		if($strip > 0) {
			unless(s/^(?:[^\/]*\/){$strip}//o) {
				&fatal('directory name contains less / than you want to strip');
			}
		}
		unless(-d $_) {
			&fatal("directory $_ does not exist")
		}
		push(@dirnames, $_);
		push(@destconts, [])
	}
	elsif((! m{^\s*\r?\n?$}) && ! m{^\s*\#}) {
		(@destconts > 0) or
			&fatal('first entry in DESTLIST must be a directory');
		push(@{$destconts[$#destconts]}, $_);
		unless(defined($desthash{$_})) {
			$desthash{$_} = ()
		}
		$desthash{$_}->{$#destconts} = 1
	}
}
if($verbose >= 2) {
	CORE::say('Desired directory structure');
	for(my $dirnr = 0; $dirnr < @destconts; ++$dirnr) {
		CORE::say($dirnames[$dirnr]);
		for(my $filenr = 0; $filenr < @{$destconts[$dirnr]}; ++$filenr) {
			CORE::say("\t", $destconts[$dirnr]->[$filenr])
		}
	}
}

# Read directories and create the corresponding array @destcont of arrays.

my %sourcehash = ();
my @sourceconts = ();
for(my $dirnr = 0; $dirnr < @dirnames; ++$dirnr) {
	opendir(my $dh, $dirnames[$dirnr]);
	while($_ = readdir($dh), defined) {
		if(($_ ne '.') && ($_ ne '..')) {
			push(@{$sourceconts[$dirnr]}, $_);
			unless(defined($sourcehash{$_})) {
				$sourcehash{$_} = ()
			}
			$sourcehash{$_}->{$dirnr} = 1;
		}
	}
	closedir($dh);
}

sub printdirs {
	my ($name, $error) = @_;
	for my $dirnr (keys(%{$sourcehash{$name}})) {
		if($error) {
			print(STDERR ' ', $dirnames[$dirnr])
		} else {
			print(' ',$dirnames[$dirnr])
		}
	}
	if($error) {
		print(STDERR "\n");
		exit(2);
	}
	print("\n")
}

# Test whether all destination names exist.

foreach my $name (keys %desthash) {
	unless(defined($sourcehash{$name})) {
		$ignorevoid or &fatal("$name does not exist");
		&warn("$name does not exist") if($verbose >= 0)
	}
}

# Test for double names

if($twins <= 0) {
	for my $name (keys %sourcehash) {
		if(keys(%{$sourcehash{$name}}) > 1) {
			&error("$name occurs in several directories, namely in");
			&printdirs($name,1)
		}
	}
}

# Test whether all destination names can be copied from somewhere without
# getting into conflict with double sourcenames.
# Simultaneously, we `execute' the move/copy commands (by writing them to @A;
# moreover, we delete our name from sourcehash and sourcecont in case of
# moving.

my @A = ();
for(my $destnr = 0; $destnr < @dirnames; ++$destnr) {
	for(my $filenr = 0; $filenr < @{$destconts[$destnr]}; ++$filenr) {
		my $name = $destconts[$destnr]->[$filenr];
		if(defined($sourcehash{$name})) {
			my $count = keys(%{$sourcehash{$name}});
			my @sources;
			if($count > 1) {
				@sources = keys(%{$sourcehash{$name}})
			}
			if(defined($sourcehash{$name}->{$destnr})) {
				if($count > 1) {
					if($twins <= 1) {
						&error("$name occurs in several directories, namely in");
						&printdirs($name, 1)
					} else {
						&warn("$name occurs in several directories, but on the right place in " . $dirnames[$destnr])
					}
				}
			} else {
				my $dests = $desthash{$name};
				my $sourcenr = (keys %{$sourcehash{$name}})[0];
				if($count > 1) {
					my $movefrom = -1;
					my $preciselyone = '';
					for my $dirtmp (@sources) {
						unless(defined($dests->{$dirtmp})) {
							# $name occurs in some directory $dirtmp where it should not
							if($preciselyone) {
								$preciselyone = '';
								last
							} else {
								$preciselyone = 1;
								$movefrom = $dirtmp
							}
						}
					}
					if($preciselyone) {
						if($twins <= 2) {
							&error("$name occurs in several directories and must be moved/copied\nThe directory names are");
							&printdirs($name, 1)
						}
						if($verbose >= 0) {
							 &warning("$name occurs in several directories and must be moved precisely once from ", $dirnames[$movefrom], " to ", $dirnames[$destnr])
						}
					} else {
						if($twins <= 3) {
							&error("$name occurs in several directories, and it is unclear which one to move/copy into ", $dirnames[$destnr], "\nThe possible directory names are");
							&printdirs($name, 1)
						}
						if($verbose >= 0) {
							&warn("$name occurs in several directories, and it is unclear which one to move/copy into ", $dirnames[$destnr], ";\nthe accidental choice is from ", $dirnames[$sourcenr]);
							&printdirs($name, 0)
						}
					}
				}

				# Now we `execute' the moving/copying from directory $sourcenr

				if(defined($desthash{$name}->{$sourcenr})) {
					push(@A, [&shdash(['cp', '-a', '-i'], $dirnames[$sourcenr] . '/' . $name, $dirnames[$destnr])])
				} else {
					push(@A, [&shdash(['mv', '-i'], $dirnames[$sourcenr] . '/' . $name, $dirnames[$destnr])]);
					for(my $i = 0; $i < @{$sourceconts[$sourcenr]}; ++$i) {
						if($sourceconts[$sourcenr]->[$i] eq $name) {
							$sourceconts[$sourcenr]->[$i] = ''; last
						}
					}
					$sourcehash{$name}->{$sourcenr} = undef;
				}
			}
		}
	}
}

# Now we delete the remainder:

if($dodelete) {
	for(my $dirnr = 0; $dirnr < @dirnames; ++$dirnr) {
		my $conts = $sourceconts[$dirnr];
		for(my $filenr = 0; $filenr < @$conts; ++$filenr) {
			my $name = $conts->[$filenr];
			if($name ne '') {
				unless(defined($desthash{$name}->{$dirnr})) {
					push(@A, [&shdash('rm', $dirnames[$dirnr] . '/' . $name)])
				}
			}
		}
	}
}

for my $cmd (@A) {
	if(($verbose >= 1) || $show) {
		Core::say(&shell_quote_best_effort(@$cmd))
	}
	unless($show) {
		system(@$cmd)
	}
}
