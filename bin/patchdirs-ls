#!/usr/bin/perl
use integer;
use Getopt::Long;
use File::Find;

sub version { '$Revision: 1.5 $ ' =~ /Revision:\s([^\s]*)/;
	print "Patchdirs-ls v$1 by Martin VÃ¤th\n"
	 .    "martin\@mvath.de\n";
	exit(0)
}

$0 =~ /([^\/]*)$/;
$script=$1;

sub usage {
	my($exitstatus)=@_;
	print STDERR <<"EOUSAGE";
Usage: $script [options] DESTLIST
Moves/deletes/copies files such that after the operatations the directories
listed in the file(s) DESTLIST contain *precisely* the files listed in DESTLIST.
The format of DESTLIST is simple: The name of the first directory, followed
by the files it should contain, the name of the second directory, followed by
its files etc; to distinguish directories from files, the directory names
*must* end with : or \/  and the filenames must *not*.
Lines starting with '#' are ignored.
Options:
--strip=NUM  -p NUM Cut the first NUM '/' from the directory names.
--show       -s     Only show what would be done, do not alter anything.
--verbose=x  -v x   Be verbose (level x; x<0 suppresses warnings; 0 is default)
--nodelete   -D     Do not delete any files
--delete     -d     Override previous --nodelete
--twins=NUM  -t NUM Continue even if there are doubts about double sourcenames.
                    Depending on NUM, the following leads to an error:
                    0: Names are double (even if on the right place)
                    1: Names are double, but all exist in right directory
                    2: Names are double, but precisely one needs to be moved
                    3: Names are double and it is unclear which to move/copy
                    4: - (double names are always OK)
--ignorevoid -e     Continue even if a required file does not exist
--ignore     -i     Same as --twins=4 --ignorevoid
--version    -V     Print version number
EOUSAGE
	exit($exitstatus)
}

# Default for the Options:

$dodelete = 1;
$strip = 0;
$verbose = 0;
$twins = 0;
$ignorevoid = '';
$show = '';

# Parse Options:

$Getopt::Long::bundling = 1;
GetOptions(
	'help|h|?', sub { usage(0) },
	'version|V', \&version,
	'show|s', \$show,
	'delete|d', \$dodelete,
	'nodelete|D', sub { $dodelete = '' },
	'strip|p=i', sub { (undef,$strip) = @_ },
	'twins|t=i', \$twins,
	'ignorevoid|e', \$ignorevoid,
	'ignore|i', sub { $twins = 4; $ignorevoid = 1 },
	'verbose|v:i', \$verbose
) or usage(-1);

# Read DESTLIST and create the corresponding array @destcont of arrays.

@desthash = ();
while(<>) {
	chomp;
	if(s/[\:\/]\s*$//o) { # We are parsing a directory name
		if($strip > 0) {
			unless(s/^([^\/]*\/){$strip}//o) {
				die "error: directory name contains less / than you want to strip\nStopped";
			}
		}
		unless(-d $_) {
			die "error: directory $_ does not exist\nStopped"
		}
		push(@dirnames, $_);
		push(@destconts, []);
	}
	elsif((!/^\s*\r?\n?$/) && (!/^\s*\#/)) {
		($#destconts >= 0) or \
			die "error: first entry in DESTLIST must be a directory\nStopped";
		push(@{$destconts[$#destconts]}, $_);
		unless(defined($desthash{$_})) {
			$desthash{$_} = ()
		}
		$desthash{$_}->{$#destconts} = 1;
	}
}
if($verbose >= 2) {
	print "Desired directory structure\n";
	for(my $dirnr = 0; $dirnr <= $#destconts; ++$dirnr) {
		print "$dirnames[$dirnr]\n";
		for(my $filenr = 0; $filenr <= $#{$destconts[$dirnr]}; ++$filenr) {
			print "\t$destconts[$dirnr]->[$filenr]\n"
		}
	}
}

# Read directories and create the corresponding array @destcont of arrays.

@sourcehash = ();
for(my $dirnr = 0; $dirnr <= $#dirnames; ++$dirnr) {
	opendir(DIR, $dirnames[$dirnr]);
	while($_ = readdir(DIR), defined) {
		if(($_ ne '.') && ($_ ne '..')) {
			push(@{$sourceconts[$dirnr]}, $_);
			unless(defined($sourcehash{$_})) {
				$sourcehash{$_} = ()
			}
			$sourcehash{$_}->{$dirnr} = 1;
		}
	}
	closedir(DIR);
}

sub printdirs { my($name, $error) = @_;
	foreach my $dirnr (keys(%{$sourcehash{$name}})) {
		if($error) {
			print STDERR " $dirnames[$dirnr]"
		}
		else {
			print " $dirnames[$dirnr]"
		}
	}
	if($error) {
		die "\nStopped"
	}
	else {
		print "\n"
	}
}

# Test whether all destination names exist.

foreach my $name (keys %desthash) {
	unless(defined($sourcehash{$name})) {
		$ignorevoid or die "error: $name does not exist\nStopped";
		if($verbose >= 0) {
			print STDERR "warning: $name does not exist\n";
		}
	}
}

# Test for double names

if($twins <= 0) {
	for my $name (keys %sourcehash) {
		if(keys(%{$sourcehash{$name}}) > 1) {
			print STDERR "error: $name occurs in several directories, namely in";
			printdirs($name,1);
		}
	}
}

# Test whether all destination names can be copied from somewhere without
# getting into conflict with double sourcenames.
# Simultaneously, we `execute' the move/copy commands (by writing them to @A;
# moreover, we delete our name from sourcehash and sourcecont in case of
# moving.

@A = ();
for(my $destnr = 0; $destnr <= $#dirnames; ++$destnr) {
	for(my $filenr = 0; $filenr <= $#{$destconts[$destnr]}; ++$filenr) {
		my $name = $destconts[$destnr]->[$filenr];
		if(defined($sourcehash{$name})) {
			my $count = keys(%{$sourcehash{$name}});
			my @sources;
			if($count > 1) {
				@sources = keys(%{$sourcehash{$name}})
			}
			if(defined($sourcehash{$name}->{$destnr})) {
				if($count > 1) {
					if($twins <= 1) {
						print STDERR "error: $name occurs in several directories, namely in";
						printdirs($name, 1);
					} else {
						print "warning: $name occurs in several directories, but on the right place in $dirnames[$destnr]\n";
					}
				}
			} else {
				my $dests = $desthash{$name};
				my $sourcenr = (keys %{$sourcehash{$name}})[0];
				if($count > 1) {
					my $movefrom = -1;
					my $preciselyone = '';
					foreach my $dirtmp (@sources) {
						unless(defined($dests->{$dirtmp})) {
							# $name occurs in some directory $dirtmp where it should not
							if($preciselyone) {
								$preciselyone = '';
								last
							} else {
								$preciselyone = 1;
								$movefrom = $dirtmp
							}
						}
					}
					if($preciselyone) {
						if($twins <= 2) {
							print STDERR "error: $name occurs in several directories and must be moved/copied\nThe directory names are";
							printdirs($name, 1)
						}
						if($verbose >= 0) {
							 print "warning: $name occurs in several directories and must be moved precisely once from $dirnames[$movefrom] to $dirnames[$destnr]\n"
						}
					} else {
						if($twins <= 3) {
							print STDERR "error: $name occurs in several directories, and it is unclear which one to move/copy into $dirnames[$destnr]\nThe possible directory names are";
							printdirs($name, 1)
						}
						if($verbose >= 0) {
							print "warning: $name occurs in several directories, and it is unclear which one to move/copy into $dirnames[$destnr];\nthe accidental choice is from $dirnames[$sourcenr]\n";
							printdirs($name, 0)
						}
					}
				}

				# Now we `execute' the moving/copying from directory $sourcenr

				if(defined($desthash{$name}->{$sourcenr})) {
					push(@A, "cp -a -i $dirnames[$sourcenr]/$name $dirnames[$destnr]")
				} else {
					push(@A, "mv -i $dirnames[$sourcenr]/$name $dirnames[$destnr]");
					for(my $i = 0;$i <= $#{$sourceconts[$sourcenr]}; ++$i) {
						if($sourceconts[$sourcenr]->[$i] eq $name) {
							$sourceconts[$sourcenr]->[$i] = ''; last
						}
					}
					$sourcehash{$name}->{$sourcenr} = undef;
				}
			}
		}
	}
}

# Now we delete the remainder:

if($dodelete) {
	for(my $dirnr = 0; $dirnr <= $#dirnames; ++$dirnr) {
		my $conts = $sourceconts[$dirnr];
		for(my $filenr = 0; $filenr <= $#{$conts}; ++$filenr) {
			my $name = $conts->[$filenr];
			if($name ne '') {
				unless(defined($desthash{$name}->{$dirnr})) {
					push(@A, "rm -- $dirnames[$dirnr]/$name")
				}
			}
		}
	}
}

for my $cmd (@A) {
	if(($verbose >= 1) || show) {
		print "$cmd\n"
	}
	unless($show) {
		system($cmd)
	}
}
