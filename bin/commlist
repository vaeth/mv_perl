#!/usr/bin/env perl
BEGIN { require 5.006_001 }
package Commlist;
our $VERSION = 'v3.0.0';
eval { $VERSION = version->declare($VERSION) };
eval 'use version 0.77; $VERSION = version->declare($VERSION)' if ($@);

use warnings;
use strict;
use integer;
use Getopt::Long 2.24 ();
#use Pod::Usage ();

=encoding UTF-8

=head1 NAME

commlist - print lines common/not common to two lists of files

=head1 SYNOPSIS

B<commlist> [options] I<fileA1> I<fileA2> ... B<""> I<fileB1> I<fileB2> ...

To get an extended help, type B<commlist --man> or B<commlist -?>

=head1 DESCRIPTION

The files I<fileA...> are compared against the files I<fileB...>,
and lines of I<fileA...> which are also/not occurring in one of the files
I<fileB...> are output in a first/second columns.
Option B<-1> or B<-2> suppresses the corresponding column.
The special name B<-> specifies standard input.

In contrast to the standard unix B<comm> utility, unsorted input data is ok.
Moreover, the order of the lines output corresponds to that of I<fileA...>

=head1 OPTIONS

=over 8

=item B<--help> or B<-h>

Display brief help.

=item B<--man> or B<-?>

Display extended help as a manpage.

=item B<-1> or B<-2>

Suppress the first or second column of output, respectively.

=item B<--common=>I<string> or B<-c> I<string>

Prefix the column of lines also occurring in I<fileB...> with I<string>.
The default is the empty string.

=item B<--only=>I<string> or B<-o> I<string>

Prefix the column of lines not occurring in I<fileB...> with I<string>.
The default is the empty string or the tab character, depending on whether
this is the second column or not.

=item B<--ignore-space> or B<-s>

Ignore leading/trailing space, and inside lines replace all tabs by spaces
and crunsh several consecutive spaces to one. Also ignore empty lines.

=item B<--ignore-comments> or B<-i>

Ignore comments starting with # and spaces before these.
Lines consisting only of comments are skipped completely.

=item B<--ignore-semicolons or B<-S>

Ignore comments starting with # and spaces before these.
Lines consisting only of comments are skipped completely.

=item B<--ignore-c> or B<-I>

Ignore comments starting with // or enclosed in /* ... */ and spaces befere
or after these. Lines consisting only of comments are skipped completely.

=item B<--version> or B<-v>

print version number

=item B<-->

Last option

=back

=head1 AUTHOR

Martin VE<auml>th E<lt>martin@mvath.deE<gt>

=cut

# Global variables;:

my $name = 'commlist';

# Option variables:

my $suppress1 = '';
my $suppress2 = '';
my $only = undef;
my $common = '';
my $ignore_space = '';
my $ignore_comments = '';
my $ignore_semicolons = '';
my $ignore_c = '';

# Functions

sub warn {
	print(STDERR $name, ': warning: ', @_, "\n")
}

sub version {
	print($name, ' ', $VERSION, "\n");
	exit(0)
}

sub pod2usage {
	require Pod::Usage;
	&Pod::Usage::pod2usage
}

{
	package File;
	sub new {
		my $class = shift();
		bless({
			name => '',
			handle => undef,
			isfile => ''
		}, $class)
	}
	sub close {
		my $self = shift();
		return 1 unless ($self->{isfile});
		$self->{isfile} = '';
		my $ret = close($self->{handle});
		$self->{handle} = undef;
		&Commlist::warn('cannot close: ', $self->{name}) unless ($ret);
		$ret
	}
	sub open {
		my $self = shift();
		my ($name) = @_;
		$self->close();
		$self->{name} = $name;
		if ($name eq '-') {
			$self->{isfile} = '';
			$self->{handle} = \*STDIN;
			return 1
		}
		unless (open($self->{handle}, '<', $name)) {
			&Commlist::warn('cannot open: ', $name);
			return ($self->{isfile} = '')
		}
		$self->{isfile} = 1
	}
	sub get {
		my $self = shift();
		my $fh = $self->{handle};
		return <$fh>;
	}
	sub DESTROY {
		my $self = shift();
		$self->close()
	}
}

{
	package Strip;
	sub new {
		my $class = shift();
		my $self = bless({
			open => ''
		}, $class);
		$self
	}
	sub strip {
		my $self = shift();
		my ($line) = @_;
		chomp($line);
		$line =~ s{\r\Z}{}g;
		if ($self->{open}) {
			if ($line =~ s{\A.*?\*\/\s*}{}) {
				$self->{open} = '';
				return undef if ($line eq '')
			} else {
				return undef
			}
		}
		if ($ignore_comments) {
			if ($line =~ s{\s*\#.*\Z}{}) {
				return undef if ($line eq '')
			}
		}
		if ($ignore_semicolons) {
			if ($line =~ s{\s*\;.*\Z}{}) {
				return undef if ($line eq '')
			}
		}
		if ($ignore_c) {
			my $found = ($line =~ s{\s*\/\/.*\Z}{});
			$found = 1 if ($line =~ s{\s*\/\*.*?\*\/\s*}{}g);
			$self->{open} = $found = 1
				if ($line =~ s{\s*\/\*.*\z}{});
			if ($found) {
				return undef if ($line eq '')
			}
		}
		if ($ignore_space) {
			$line =~ s{\A\s*}{};
			$line =~ s{\s*\Z}{}g;
			$line =~ s{\s+}{ }g;
			return undef if ($line eq '')
		}
		$line
	}
	sub unclosed {
		my $self = shift();
		return 1 unless($self->{open});
		&Commlist::warn('unclosed /*', (scalar(@_) ? (' in ') : ()), @_);
		$self->{open} = ''
	}
	sub DESTROY {
		my $self = shift();
		$self->unclosed();
	}
}


# Parse Options:

Getopt::Long::Configure(qw(gnu_getopt));
Getopt::Long::GetOptions(
	'help|h', sub { &pod2usage(0) },
	'man|?', sub { &pod2usage(-verbose => 2, -exit => 0) },
	'only|o=s', \$only,
	'common|c=s', \$common,
	'ignore-space|s', \$ignore_space,
	'ignore-comments|i', \$ignore_comments,
	'ignore-semicolons|S', \$ignore_semicolons,
	'ignore-c|I', \$ignore_c,
	'1', \$suppress1,
	'2', \$suppress2,
	'version|V', \&version
) or &pod2usage(2);

$only = ($suppress1 ? '' : "\t") unless (defined($only));

my @fileA = ();
my @fileB = ();

my $found = '';
for my $arg (@ARGV) {
	if ($found) {
		push(@fileB, $arg);
		next
	}
	if ($arg eq '') {
		$found = 1
	} else {
		push(@fileA, $arg)
	}
}
&pod2usage(1) unless ($found);
exit(0) unless (@fileA);

my %B = ();
for my $filename (@fileB) {
	my $file = File->new();
	next unless $file->open($filename);
	my $strip = Strip->new();
	while (my $line = $file->get()) {
		my $stripped = $strip->strip($line);
		$B{$stripped} = undef if (defined($stripped))
	}
	$strip->unclosed($filename);
	$file->close()
}
for my $filename (@fileA) {
	my $file = File->new();
	next unless $file->open($filename);
	my $strip = Strip->new();
	while (my $line = $file->get()) {
		my $stripped = $strip->strip($line);
		next unless (defined($stripped));
		if (exists($B{$stripped})) {
			print($common, $line) unless ($suppress1)
		} else {
			print($only, $line) unless ($suppress2)
		}
	}
	$strip->unclosed($filename);
	$file->close()
}
