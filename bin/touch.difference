#!/usr/bin/env perl
require 5.012;
package TouchDifference v2.0.3;

use strict;
use integer;
use Getopt::Long 2.24 ();
#use File::lchown 0.02 (); # used for symlinks if -F is not specified
#use Time::localtime (); # if verbose is used
#use Pod::Usage ();

=head1 NAME

touch.difference - correct times of files, e.g. by a daylight saving offset

=head1 SYNOPSIS

B<touch.difference> [options] I<File1> [I<File2> I<...>]

To get an extended help, type B<touch.difference --man>

=head1 DESCRIPTION

This script modifies the timestamps of all files given as arguments
by adding or subtracting a certain amount of time given in the options.

Even if you do not specify that something is added or subtracted,
the timestamps will be modified, in general, since the accuracy of this
script is only in seconds, i.e. if your filesystem has a more accurate
resolution than 1 second, the timestamps are modified to be a full second.
This is considered a feature, since it simplifies comparing timestamps
of different filesystems with different resolutions of timestamps.

=head1 OPTIONS AND ARGUMENTS

=over 8

=item B<--help> or B<-h>

Display brief help

=item B<--man> or B<-?>

Display extended help as a manpage

=item B<--version> or B<-V>

Print version number and exit

=item B<--add=>I<seconds> or B<-a> I<seconds>

Add I<seconds> to the file mtime/atime timestamps

=item B<--sub=>I<seconds> or B<-s> I<seconds>

Sub I<seconds> from the file mtime/atime timestamps

=item B<--follow-link> or B<-F>

For symbolic links use the file it points to instead of link pointer

=item B<--check> or B<-c>

Check whether timestamps of symlinks can be changed, and exit.
You might want to combine this with quiet.

=item B<--noatime>

Do not modify the atime

=item B<--nomtime>

Do not modify the mtime

=item B<--quiet> or B<-q>

Be quiet: suppress warnings

=item B<--verbose> or B<-v>

Be verbose

=item B<--dry-run> or B<-n>

Do not actually modify the times

=item B<-->

Last option

=back

=head1 AUTHOR

Martin VE<auml>th E<lt>martin@mvath.deE<gt>

=cut

# Default for the Options:

my $seconds = 0;
my $quiet = '';
my $verbose = '';
my $dry = '';
my $addatime = 1;
my $addmtime = 1;
my $follow = '';

# Global variables:

my $name = 'touch.difference';
our $VERSION;
my $lutimes = undef;

# Functions:

sub warning {
	print(STDERR "$name: warning: ",
		join("\n" . (' ' x (length($name) + 11)), @_), "\n")
		unless($quiet)
}

sub version {
	print($name, ' ', $VERSION, "\n");
	exit(0)
}

sub pod2usage {
	require Pod::Usage;
	&Pod::Usage::pod2usage
}

sub check_lutimes {
	eval {
		require File::lchown
	};
	return ($lutimes = '') if($@);
	no integer;
	$lutimes = (defined($File::lchown::VERSION) &&
		($File::lchown::VERSION >= 0.02));
	$lutimes
}

sub check_lutimes_exit {
	unless(&check_lutimes()) {
		print("perl module File::lchown 0.02 is not available:\n",
		"symbolic links are ignored unless you pass the option -F\n")
			unless($quiet);
		exit(1)
	}
	print("perl module File::lchown 0.02 is available:\n",
		"presumably you can change symbolic links\n") unless($quiet);
	exit(0)
}

# Parse Options:

Getopt::Long::Configure(qw(gnu_getopt));
Getopt::Long::GetOptions(
	'help|h', sub { &pod2usage(0) },
	'man|?', sub { &pod2usage(-verbose => 2, -exit => 0) },
	'version|V', \&version,
	'verbose!', \$verbose,
	'v', \$verbose,
	'dry-run!', \$dry,
	'n', \$dry,
	'quiet!', \$quiet,
	'q', \$quiet,
	'atime!', \$addatime,
	'mtime!', \$addmtime,
	'add|a=i', \$seconds,
	'sub|s=i', sub { $seconds = -$_[1] },
	'check|c', \&check_lutimes_exit,
	'follow-link!', \$follow,
	'F', \$follow
) or &pod2usage(2);

&pod2usage(2) unless(@ARGV);

require Time::localtime if($verbose);

# Actual touch function:

sub dotouch {
	my ($file) = @_;
	my $normal = ($follow || !(-l $file));
	unless($normal) {
		&warning('perl module File::lchown 0.02 not available: ignoring symlinks',
			'use -F if you want to follow them')
			unless(defined($lutimes) || &check_lutimes());
		unless($lutimes) {
			&warning("ignoring symlink $file");
			return
		}
	}
	my ($atime, $mtime) = ((($normal ? stat($file) : lstat($file)))[8, 9]);
	return unless(defined($atime) && defined($mtime));
	$atime += $seconds if($addatime);
	$mtime += $seconds if($addmtime);
	printf("%s %s (%s)\n", $file,
		Time::localtime::ctime($mtime),
		Time::localtime::ctime($atime)) if($verbose);
	return if($dry);
	$normal ? utime($atime, $mtime, $file) :
		File::lchown::lutimes($atime, $mtime, $file)
}

# Main part

for my $file (@ARGV) {
	&dotouch($file)
}
1;
